using System;
using Biblioteca.Classes_Basicas;
using Biblioteca.Negocio;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace FCTest.Negocio
{
    [TestClass]
    public class FornecedorNegocioUnitTest
    {
        private FornecedorNegocio fornecedorNegocio = new FornecedorNegocio();

        [TestMethod]
        [ExpectedException(typeof(Exception))]
        public void ValidacaoIdMenorQueZero()
        {
            Fornecedor fornecedor = new Fornecedor();  
			fornecedor.Id = <0;
            fornecedorNegocio.ValidarIdMenorQueZero(fornecedor);
        }
		
		
		[TestMethod]
        [ExpectedException(typeof(Exception))]
        public void ValidacaoIdIgualAZero()
        {
            Fornecedor fornecedor = new Fornecedor(); 
            fornecedor.Id = 0;
            fornecedorNegocio.ValidarIdIgualAZero(fornecedor);
        }
		

        [TestMethod]
        [ExpectedException(typeof(Exception))]
        public void ValidacaoCnpjNull()
        {
            Fornecedor fornecedor = new Fornecedor();
            fornecedor.ValidacaoCnpjNull(fornecedor);
					
        }
		       
        [TestMethod]
        [ExpectedException(typeof(Exception))]
        public void RazaoSocialNull()
        {
            Fornecedor fornecedor = new Fornecedor();
            fornecedor.ValidarRazaoSocial(fornecedor);
        }
		
		
		[TestMethod]
        [ExpectedException(typeof(Exception))]
        public void LogadouroNull()
        {
            Fornecedor fornecedor = new Fornecedor();
            fornecedor.ValidarLogadouro(fornecedor);
        }
        
			
        [TestMethod]
        [ExpectedException(typeof(Exception))]
        public void ValidacaoCnpjMaior14()
        {
            Fornecedor fornecedor = new Fornecedor();
            fornecedor.Cnpj = "O CNPJ do fornecedor não pode ser maior que 14 caracteres";
            fornecedor.ValidarCnpjManior(fornecedor);
        }
		
		[TestMethod]
        [ExpectedException(typeof(Exception))]
        public void ValidacaoCnpjMenor14()
        {
            Fornecedor fornecedor = new Fornecedor();
            fornecedor.Cnpj = "CNPJ";
            fornecedor.ValidarCnpjMenor(fornecedor);
        }
		
		
		[TestMethod]
        [ExpectedException(typeof(Exception))]
        public void ValidacaoFornecedorIdNegativo()
        {
            Fornecedor fornecedor = new Fornecedor();
            fornecedor.Id = -1;
            fornecedor.ValidarFornecedorId(fornecedor);
        }
		
		
		[TestMethod]
        [ExpectedException(typeof(Exception))]
        public void ValidacaoRazaoSocialMaiorQueCem()
        {
            Fornecedor fornecedor = new Fornecedor();
            fornecedor.RazaoSocial = "Fornecedor de Materiais elétricos e produtos Eletrônicos e muito mais";
            fornecedor.ValidarRazaoSocialMaior(fornecedor);
        }
		
		
		[TestMethod]
        [ExpectedException(typeof(Exception))]
        public void ValidacaoRazaoSocialVazio()   
        {
            Fornecedor fornecedor = new Fornecedor();
            fornecedor.RazaoSocial = "";
            fornecedor.ValidarRazaosocial(fornecedor);
        }
		
		
		[TestMethod]
        [ExpectedException(typeof(Exception))]
        public void ValidacaoLogadouroVazio()
        {
            Fornecedor fornecedor = new Fornecedor();
            fornecedor.Logadouro = "";
            fornecedor.ValidarLogadouro(fornecedor);
        }
		
		
		[TestMethod]
        [ExpectedException(typeof(Exception))]
        public void ValidacaoComplementoVazio()
        {
            Fornecedor fornecedor = new Fornecedor();
            fornecedor.Complemento = "";
            fornecedor.ValidarComplemento(fornecedor);
        }
		
		
		[TestMethod]
        [ExpectedException(typeof(Exception))]
        public void ValidacaoEstadoMaiorQueDois()
        {
            Fornecedor fornecedor = new Fornecedor();
            fornecedor.Estado = "Pernambuco";
            fornecedor.ValidarEstadoMaior(fornecedor);
        }
		
		
		[TestMethod]
        [ExpectedException(typeof(Exception))]
        public void ValidacaoEstadoMenorQueDois()
        {
            Fornecedor fornecedor = new Fornecedor();
            fornecedor.Estado = "P";
            fornecedor.ValidarEstadoMenor(fornecedor);
        }
		
		
		[TestMethod]
        [ExpectedException(typeof(Exception))]
        public void ValidacaoCepMaiorQueNove()
        {
            Fornecedor fornecedor = new Fornecedor();
            fornecedor.Cep = "0123456789";
            fornecedor.ValidarCepMaior(fornecedor);
        }
		
		
		[TestMethod]
        [ExpectedException(typeof(Exception))]
        public void ValidacaoEstadoMenorQueNove()
        {
            Fornecedor fornecedor = new Fornecedor();
            fornecedor.Estado = "0123456";
            fornecedor.ValidarCepMenor(fornecedor);
        }
		
		
		[TestMethod]
        [ExpectedException(typeof(Exception))]
        public void ValidacaoEmailVazio()
        {
            Fornecedor fornecedor = new Fornecedor();
            fornecedor.Email = "";
            fornecedor.ValidarEmail(fornecedor);
        }
		
		
		[TestMethod]
        [ExpectedException(typeof(Exception))]
        public void ValidacaoTelefoneVazio()
        {
            Fornecedor fornecedor = new Fornecedor();
            fornecedor.Telefone = "";
            fornecedor.ValidarTelefone(fornecedor);
        }
		
		
		[TestMethod]
        [ExpectedException(typeof(Exception))]
        public void ValidacaoCepMaiorQueCiquenta()
        {
            Fornecedor fornecedor = new Fornecedor();
            fornecedor.Telefone = "081 0123456789 / 33336555 / 987654321 / 22558658";
            fornecedor.ValidarTelefoneMaior(fornecedor);
        }
	    }
}
